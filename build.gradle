/*
 * Copyright 2012-2015 Ray Holder
 * Modifications copyright 2017 Robert Huffman
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'signing'

group = 'tech.huffman.re-retrying'
version = '4.0.0-SNAPSHOT'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

ext.isReleaseVersion = !version.endsWith('SNAPSHOT')
ext.scmRevision = "git rev-parse HEAD".execute().text.trim()

repositories {
    mavenCentral()
}

ext.junit4Version        = '4.12'
ext.junitVintageVersion  = '4.12.2'
ext.junitPlatformVersion = '1.0.2'
ext.junitJupiterVersion  = '5.0.2'

dependencies {
    compile 'com.google.guava:guava:23.0'
    compileOnly 'com.google.code.findbugs:jsr305:2.0.2'

    testCompile "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testCompile "org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}"
    testCompile "junit:junit:${junit4Version}"
    testCompile 'org.mockito:mockito-all:1.9.5'

    // To avoid compiler warning about use of experimental features in JUnit 5
    testCompileOnly 'org.apiguardian:apiguardian-api:1.0.0'

    testRuntime "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
    testRuntime "org.junit.vintage:junit-vintage-engine:${junitVintageVersion}"

}

tasks.withType(Jar) {
    manifest {
        attributes 'Version': version
        attributes 'Timestamp': new Date().toString()
        attributes 'SCM-Revision': scmRevision
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task publishJavadoc(type: Copy, dependsOn: javadoc) {
    from javadoc.destinationDir
    into "$projectDir/docs"
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            def sonatypeUser = getProperty('sonatypeUsername', 'SONATYPE_USERNAME_IS_NOT_SET')
            def sonatypePass = getProperty('sonatypePassword', 'SONATYPE_PASSWORD_IS_NOT_SET')

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: sonatypeUser, password: sonatypePass)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: sonatypeUser, password: sonatypePass)
            }

            pom.project {
                name 're-retrying'
                packaging 'jar'
                description 'A library to create configurable retrying strategies for an arbitrary function call, such as a method that connects to a remote service with flaky uptime.'
                url 'https://github.com/rhuffman/re-retrying'

                scm {
                    url 'scm:git@github.com:rhuffman/re-retrying.git'
                    connection 'scm:git@github.com:rhuffman/re-retrying.git'
                    developerConnection 'scm:git@github.com:rhuffman/re-retrying.git'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'rhuffman'
                        name 'Robert Huffman'
                    }
                }
            }
        }
    }
}

wrapper {
    gradleVersion = '4.8'
}

String getProperty(String name, String defaultValue) {
    project.hasProperty(name) ? project.getProperty(name) : defaultValue
}

idea {
    module {
        downloadSources = true
    }
    project {
        vcs = 'Git'
    }
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.2'
    }
}
